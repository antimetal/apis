// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: kubernetes/v1/cluster.proto

package kubernetesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Cluster contains information about a Kubernetes cluster.
type Cluster struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name is the name of the Kubernetes cluster.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// provider contains information about the Kubernetes cluster provider.
	//
	// Types that are valid to be assigned to Provider:
	//
	//	*Cluster_Eks
	//	*Cluster_Gke
	//	*Cluster_Aks
	//	*Cluster_Kind
	Provider      isCluster_Provider `protobuf_oneof:"provider"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_kubernetes_v1_cluster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_v1_cluster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_kubernetes_v1_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetProvider() isCluster_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *Cluster) GetEks() *EKS {
	if x != nil {
		if x, ok := x.Provider.(*Cluster_Eks); ok {
			return x.Eks
		}
	}
	return nil
}

func (x *Cluster) GetGke() *GKE {
	if x != nil {
		if x, ok := x.Provider.(*Cluster_Gke); ok {
			return x.Gke
		}
	}
	return nil
}

func (x *Cluster) GetAks() *AKS {
	if x != nil {
		if x, ok := x.Provider.(*Cluster_Aks); ok {
			return x.Aks
		}
	}
	return nil
}

func (x *Cluster) GetKind() *Kind {
	if x != nil {
		if x, ok := x.Provider.(*Cluster_Kind); ok {
			return x.Kind
		}
	}
	return nil
}

type isCluster_Provider interface {
	isCluster_Provider()
}

type Cluster_Eks struct {
	Eks *EKS `protobuf:"bytes,2,opt,name=eks,proto3,oneof"`
}

type Cluster_Gke struct {
	Gke *GKE `protobuf:"bytes,3,opt,name=gke,proto3,oneof"`
}

type Cluster_Aks struct {
	Aks *AKS `protobuf:"bytes,4,opt,name=aks,proto3,oneof"`
}

type Cluster_Kind struct {
	Kind *Kind `protobuf:"bytes,5,opt,name=kind,proto3,oneof"`
}

func (*Cluster_Eks) isCluster_Provider() {}

func (*Cluster_Gke) isCluster_Provider() {}

func (*Cluster_Aks) isCluster_Provider() {}

func (*Cluster_Kind) isCluster_Provider() {}

// EKS contains information about an EKS cluster.
type EKS struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// account_id is the AWS account ID that the EKS cluster is running in.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// region is the AWS region that the EKS cluster is running in.
	Region        string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EKS) Reset() {
	*x = EKS{}
	mi := &file_kubernetes_v1_cluster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EKS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EKS) ProtoMessage() {}

func (x *EKS) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_v1_cluster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EKS.ProtoReflect.Descriptor instead.
func (*EKS) Descriptor() ([]byte, []int) {
	return file_kubernetes_v1_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *EKS) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *EKS) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// GKE contains information about a GKE cluster.
type GKE struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GKE) Reset() {
	*x = GKE{}
	mi := &file_kubernetes_v1_cluster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GKE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GKE) ProtoMessage() {}

func (x *GKE) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_v1_cluster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GKE.ProtoReflect.Descriptor instead.
func (*GKE) Descriptor() ([]byte, []int) {
	return file_kubernetes_v1_cluster_proto_rawDescGZIP(), []int{2}
}

// AKS contains information about an AKS cluster.
type AKS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AKS) Reset() {
	*x = AKS{}
	mi := &file_kubernetes_v1_cluster_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AKS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AKS) ProtoMessage() {}

func (x *AKS) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_v1_cluster_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AKS.ProtoReflect.Descriptor instead.
func (*AKS) Descriptor() ([]byte, []int) {
	return file_kubernetes_v1_cluster_proto_rawDescGZIP(), []int{3}
}

// Kind contains information about a KIND cluster.
type Kind struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Kind) Reset() {
	*x = Kind{}
	mi := &file_kubernetes_v1_cluster_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kind) ProtoMessage() {}

func (x *Kind) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_v1_cluster_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kind.ProtoReflect.Descriptor instead.
func (*Kind) Descriptor() ([]byte, []int) {
	return file_kubernetes_v1_cluster_proto_rawDescGZIP(), []int{4}
}

var File_kubernetes_v1_cluster_proto protoreflect.FileDescriptor

var file_kubernetes_v1_cluster_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x22, 0xcc, 0x01, 0x0a,
	0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x03,
	0x65, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4b, 0x53, 0x48, 0x00, 0x52,
	0x03, 0x65, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x67, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x4b, 0x45, 0x48, 0x00, 0x52, 0x03, 0x67, 0x6b, 0x65, 0x12, 0x26, 0x0a, 0x03,
	0x61, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x4b, 0x53, 0x48, 0x00, 0x52,
	0x03, 0x61, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x03, 0x45,
	0x4b, 0x53, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x05, 0x0a, 0x03, 0x47, 0x4b, 0x45,
	0x22, 0x05, 0x0a, 0x03, 0x41, 0x4b, 0x53, 0x22, 0x06, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x42,
	0xb2, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x67, 0x65, 0x6e, 0x67, 0x6f, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x4b, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_kubernetes_v1_cluster_proto_rawDescOnce sync.Once
	file_kubernetes_v1_cluster_proto_rawDescData []byte
)

func file_kubernetes_v1_cluster_proto_rawDescGZIP() []byte {
	file_kubernetes_v1_cluster_proto_rawDescOnce.Do(func() {
		file_kubernetes_v1_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kubernetes_v1_cluster_proto_rawDesc), len(file_kubernetes_v1_cluster_proto_rawDesc)))
	})
	return file_kubernetes_v1_cluster_proto_rawDescData
}

var file_kubernetes_v1_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_kubernetes_v1_cluster_proto_goTypes = []any{
	(*Cluster)(nil), // 0: kubernetes.v1.Cluster
	(*EKS)(nil),     // 1: kubernetes.v1.EKS
	(*GKE)(nil),     // 2: kubernetes.v1.GKE
	(*AKS)(nil),     // 3: kubernetes.v1.AKS
	(*Kind)(nil),    // 4: kubernetes.v1.Kind
}
var file_kubernetes_v1_cluster_proto_depIdxs = []int32{
	1, // 0: kubernetes.v1.Cluster.eks:type_name -> kubernetes.v1.EKS
	2, // 1: kubernetes.v1.Cluster.gke:type_name -> kubernetes.v1.GKE
	3, // 2: kubernetes.v1.Cluster.aks:type_name -> kubernetes.v1.AKS
	4, // 3: kubernetes.v1.Cluster.kind:type_name -> kubernetes.v1.Kind
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_kubernetes_v1_cluster_proto_init() }
func file_kubernetes_v1_cluster_proto_init() {
	if File_kubernetes_v1_cluster_proto != nil {
		return
	}
	file_kubernetes_v1_cluster_proto_msgTypes[0].OneofWrappers = []any{
		(*Cluster_Eks)(nil),
		(*Cluster_Gke)(nil),
		(*Cluster_Aks)(nil),
		(*Cluster_Kind)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kubernetes_v1_cluster_proto_rawDesc), len(file_kubernetes_v1_cluster_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kubernetes_v1_cluster_proto_goTypes,
		DependencyIndexes: file_kubernetes_v1_cluster_proto_depIdxs,
		MessageInfos:      file_kubernetes_v1_cluster_proto_msgTypes,
	}.Build()
	File_kubernetes_v1_cluster_proto = out.File
	file_kubernetes_v1_cluster_proto_goTypes = nil
	file_kubernetes_v1_cluster_proto_depIdxs = nil
}
